from typing import Callable
from discord import Embed, Colour
from functools import reduce
from config import *

class KgbCategory:
    def __init__(self, name: str, hidden=False) -> None:
        self._name = name
        self._hidden = hidden
        self._commands: set[str] = set()

    def getName(self) -> str: return self._name
    def getCommands(self) -> set[str]: return self._commands
    def isHidden(self) -> bool: return self._hidden

    def addCommand(self, command: str) -> None:
        self._commands.add(command)

    def intoEmbed(self, embed: Embed) -> Embed:
        embed.add_field(name=self._name, value=reduce(lambda v,e: f'{v} `{e}`', self._commands, '–ö–æ–º–∞–Ω–¥—ã:'), inline=False)
        return embed

    def getData(self) -> tuple[str, str]:
        outCommands = ''
        for i, val in enumerate(sorted(self._commands)):
            if (i+1) % 5 == 0:
                outCommands = f'{outCommands} `{val}`\n'
            else:
                outCommands = f'{outCommands} `{val}`'

        return self._name, outCommands

HELP_CATEGORIES = {
    'info'      : KgbCategory('üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'),
    'fun'       : KgbCategory('üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ'),
    'neuro'     : KgbCategory('üñ•Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç–∏'),
    'api'       : KgbCategory('üîë –ê–ø–∏ –∫–æ–º–∞–Ω–¥—ã'),
    'scratch'   : KgbCategory('üò∫ –°–∫—Ä–µ—Ç—á'),
    'music'     : KgbCategory('üéµ –ú—É–∑—ã–∫–∞'),
    'rp'        : KgbCategory('üé≠ –†–ü'),
    'secret'    : KgbCategory('‚ò¢Ô∏è Secret', hidden=True),
    'moderation': KgbCategory('üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è'),
    'config'    : KgbCategory('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'),
    'misc'      : KgbCategory('üõ† –û—Å—Ç–∞–ª—å–Ω–æ–µ'),
}

def helpCategory(categoryName: str) -> Callable:
    def helpFunc(func: Callable) -> Callable:
        if categoryName not in HELP_CATEGORIES:
            raise ValueError(f'Category {categoryName} is not defined!')

        HELP_CATEGORIES[categoryName].addCommand(func.__name__)
        return func

    return helpFunc

def buildHelpEmbed() -> Embed:
    emb = Embed(title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:", color=Colour(0x000000))

    for i, categ in enumerate(filter(lambda v: not v.isHidden(),HELP_CATEGORIES.values())):
        catName, _ = categ.getData()
        emb.add_field(name=f'{i+1} - {catName}', value='', inline=False)

    emb.add_field(name="–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, \n–ù–∞–ø–∏—à–∏—Ç–µ:", value="`kgb!help (—Ü–∏—Ñ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)`", inline=False)
    emb.add_field(name="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ –±—É—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç—É—Ç:", value=f"[–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—Å!]({boostyURL})", inline=False)
    emb.set_thumbnail(url=tumbaYUMBA)
    emb.set_footer(text="Soviet WorkShop ¬© 2023", icon_url=avaURL)
    
    return emb

def buildCategoryEmbeds() -> tuple[list[Embed], dict[str, Embed]]:
    def addEmbed(categ: KgbCategory) -> Embed:
        emb = Embed(title=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {categ.getName()}", color=Colour(0x000000))
        emb.add_field(name="–ö–æ–º–∞–Ω–¥—ã:", value=categ.getData()[1], inline=False)
        emb.add_field(name="–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞, \n–ù–∞–ø–∏—à–∏—Ç–µ:", value="`kgb!help (–∫–æ–º–∞–Ω–¥–∞)`", inline=False)
        emb.set_thumbnail(url=tumbaYUMBA)
        emb.set_footer(text="Soviet WorkShop ¬© 2023", icon_url=avaURL)
        return emb

    embs = [addEmbed(categ) for categ in filter(lambda v: not v.isHidden(), HELP_CATEGORIES.values())]
    embsHidden = {val: addEmbed(categ) for val, categ in HELP_CATEGORIES.items()}

    return embs, embsHidden
